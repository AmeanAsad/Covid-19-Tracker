{"version":3,"sources":["components/search.jsx","components/navigation.jsx","components/geochart.jsx","components/homepage.jsx","components/countries.jsx","components/countryview.jsx","components/about.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["source","axios","get","headers","then","res","form","data","map","user","key","title","as","Link","to","description","push","catch","err","console","log","initialState","isLoading","results","value","load","SearchMenu","state","handleResultSelect","e","result","window","location","href","handleSearchChange","setState","setTimeout","length","re","RegExp","_","escapeRegExp","filter","test","this","Search","size","placeholder","loading","onResultSelect","onSearchChange","debounce","leading","props","Component","Navigation","activeItem","handleItemClick","name","className","Menu","fluid","stackable","Item","active","onClick","position","GeoChart","countriesValues","mostVisited","country_data","data_all","svgRef","useRef","wrapperRef","vals","country","d1","current","parseInt","locations","world","d2","objects","countries","geometries","i","properties","locations2","previousTransformation","worldScaleFactor","worldmapBBox","worldmapBBoxOffsetX","worldmapBBoxOffsetY","translateX","translateY","topojson","continents","type","id","features","d","continent","worldDefaultTransformation","undefined","c","useEffect","selectedCountry","continentBBox","len","svg","select","attr","container","document","getElementById","width","clientWidth","height","clientHeight","projection","d3","path","geoPath","group","append","fitWorld","getBBox","Math","min","x","y","transition","focusLevel","changeFocus","clickedCountry","selectAll","animVal","duration","bBox","scaleFactor","zoomWorldToContinent","miniCountryScale","targetSize","on","textContent","zoomContinentToCountry","delay","colorScheme","colorScale","domain","log10","enter","call","replace","insert","stopPropagation","text","legend","style","range","yAxis","scale","ticks","Grid","centered","Row","textAlign","Button","basic","color","ref","Table","celled","striped","Header","HeaderCell","colSpan","Body","Cell","collapsing","Icon","Homepage","overall","recovered","cases","deaths","config","datum","end","recoveries","columns","Column","Message","icon","header","content","List","options","Countries","handleSort","clickedColumn","column","direction","reverse","sortBy","option","elements","million_stats","today_stats","table_header","table_body","header1","sorted","header2","header3","perMillion","today","el","Dropdown","button","floating","labeled","onChange","bind","singleLine","Country","todayDeaths","todayCases","componentDidMount","params","match","critical","casesPerOneMillion","deathsPerOneMillion","totalTests","testsPerOneMillion","labels","datasets","backgroundColor","hoverBackgroundColor","body","recovery_rate","round","death_rate","table_side","table_row","table_body1","table_body2","today_deaths","today_cases","critical_cases","recovery_progress","Progress","percent","progress","death_progess","active_cases","active_percentage","tests","Segment","About","App","exact","component","withRouter","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"js/main.1124cb6b.chunk.js","sourcesContent":["import _ from 'lodash'\nimport faker from 'faker';\nimport React, { Component } from 'react'\nimport { Search, Dropdown } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect, Link, withRouter } from \"react-router-dom\";\n\n\n\n\nconst config = {\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n};\n\nconst source = [];\n\naxios\n    .get(\"http://127.0.0.1:8000/api/get/search/\",\n        config)\n    .then(res => {\n        const users = res.data\n        const form = users.map(user => {\n            return {\n                key: user.title,\n                as: Link,\n                to: `/info/${user.title}/`,\n                title: user.title,\n                description: user['description'],\n            };\n        });\n\n        source.push((form));\n    })\n    .catch(err => {\n        console.log(err)\n    });\n\n\nconst initialState = { isLoading: false, results: [], value: '', load: false }\n\nconsole.log(source[0])\n\n\nclass SearchMenu extends Component {\n\n\n    state = initialState\n\n\n\n    handleResultSelect = (e, { result }) => {\n        console.log(result)\n        window.location.href = 'http://localhost:3000/info/' + result.title\n    }\n\n    handleSearchChange = (e, { value }) => {\n\n        console.log('change')\n        this.setState({ isLoading: true, value, load: false })\n\n        setTimeout(() => {\n            if (this.state.value.length < 1) return this.setState(initialState)\n\n            const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n            const isMatch = (result) => re.test(result.title)\n\n            this.setState({\n                isLoading: false,\n                results: _.filter(source[0], isMatch),\n            })\n        }, 300)\n\n    }\n\n    render() {\n        const { isLoading, value, results, load } = this.state\n\n\n        return (\n\n\n            <div>\n                <Search\n                    size='small'\n                    placeholder={\"Search for countries\"}\n                    loading={isLoading}\n                    onResultSelect={this.handleResultSelect}\n                    // onMouseDown={this.mousedown}\n                    onSearchChange={_.debounce(this.handleSearchChange, 500, {\n                        leading: true,\n                    })}\n                    results={results}\n                    value={value}\n                    {...this.props}\n                />\n            </div>\n\n        )\n\n\n\n    }\n}\n\nexport default SearchMenu;","import React, { Component } from 'react';\n\nimport { Input, Menu } from 'semantic-ui-react'\nimport { Link } from \"react-router-dom\";\nimport SearchMenu from \"./search\";\nimport \"./css/navigation.css\";\n\n\nclass Navigation extends Component {\n    state = { activeItem: 'home' }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n    render() {\n\n        const { activeItem } = this.state\n\n        return (\n\n            <div className=\"menu-wrapper\">\n\n\n                <Menu fluid stackable className=\"menu\" size=\"large\" stackable color=\"blue\" inverted>\n\n                    <Menu.Item\n                        as={Link} to=\"/\"\n                        name='Home'\n                        active={activeItem === 'home'}\n                        onClick={this.handleItemClick}\n                    />\n                    <Menu.Item\n                        as={Link} to=\"/countries\"\n                        name='Countries'\n                        active={activeItem === 'countries'}\n                        onClick={this.handleItemClick}\n                    />\n                    <Menu.Item\n                        as={Link} to=\"/about\"\n                        name='About'\n                        active={activeItem === 'about'}\n                        onClick={this.handleItemClick}\n                    />\n                    <Menu.Menu position='right'>\n                        <Menu.Item>\n                            {/* <Input icon='search' placeholder='Search...' /> */}\n                            <SearchMenu ></SearchMenu>\n                        </Menu.Item>\n                    </Menu.Menu>\n                </Menu>\n            </div>\n\n\n        );\n    }\n}\n\nexport default Navigation;","\nimport React, { useRef, useEffect } from 'react';\nimport { select, geoPath } from \"d3\";\nimport d1 from \"./data/dataTheodoTravels2015.json\";\nimport \"./css/test.css\";\nimport * as topojson from 'topojson'\nimport * as d3 from 'd3';\nimport { Link, Redirect } from \"react-router-dom\";\n\nimport { Grid, Table, Icon, Button } from \"semantic-ui-react\"\nimport d2 from \"./data/data.json\";\n//function GeoChart(){}\nfunction GeoChart(props) {\n\n    var all_cases;\n    var country_cases;\n\n    const country_data = props.data_all;\n\n    const svgRef = useRef();\n    const wrapperRef = useRef();\n\n    var countriesValues, mostVisited;\n    mostVisited = 0;\n    var vals = [];\n    countriesValues = d1;\n    for (var country in countriesValues) {\n        const current = parseInt(countriesValues[country])\n        vals.push(current)\n        if (mostVisited < current) {\n            mostVisited = current;\n        }\n    }\n\n\n    const locations = {}\n\n    const world = d2;\n    const data = world.objects.countries.geometries;\n    for (var i = 0; i < data.length; i++) {\n        const name = data[i].properties.name;\n        locations[name] = data[i].properties.location;\n    }\n\n\n\n\n\n    var locations2 = []\n\n\n    for (var i = 0; i < data.length; i++) {\n        locations2.push(data[i].properties.location)\n    }\n\n\n    var countries = topojson.feature(world, world.objects.countries);\n\n    // console.log(countries)\n    // We group the countries in contients (We removed Antarctica and we put oceania with Asia)\n    var asia = { type: \"FeatureCollection\", name: \"Asia and Oceania\", id: 1, features: countries.features.filter(function (d) { return d.properties.continent == \"Asia and Oceania\"; }) };\n    var africa = { type: \"FeatureCollection\", name: \"Africa\", id: 2, features: countries.features.filter(function (d) { return d.properties.continent == \"Africa\"; }) };\n    var europe = { type: \"FeatureCollection\", name: \"Europe\", id: 3, features: countries.features.filter(function (d) { return d.properties.continent == \"Europe\"; }) };\n    var na = { type: \"FeatureCollection\", name: \"North America\", id: 4, features: countries.features.filter(function (d) { return d.properties.continent == \"North America\"; }) };\n    var sa = { type: \"FeatureCollection\", name: \"South America\", id: 5, features: countries.features.filter(function (d) { return d.properties.continent == \"South America\"; }) };\n\n    var continents = [asia, africa, europe, na, sa];\n    var changeFocus, previousTransformation, worldScaleFactor, worldmapBBox, worldmapBBoxOffsetX, worldmapBBoxOffsetY, translateX, translateY;\n    // There are 3 levels of zoom: \"world, continent and country\"\n    var current = '';\n    var worldDefaultTransformation = undefined;\n    var c = \"World\";\n\n\n\n    useEffect(() => {\n        console.log(country_data);\n        if (props.data_all[\"USA\"] != undefined) {\n\n            const svg = select(svgRef.current)\n                .attr(\"width\", \"100%\")\n                .attr(\"height\", \"100%\");\n\n            // const { width, height } =\n            //     dimensions || wrapperRef.current.getBoundingClientRect();\n            var\n                container = document.getElementById(\"map-container\"),\n                width = container.clientWidth,\n                height = container.clientHeight;\n            var projection = d3.geoNaturalEarth1();\n            const path = geoPath().projection(projection);\n\n            // const group = svg;\n            var group = svg.append(\"g\")\n                .attr(\"width\", \"100%\")\n                .attr(\"height\", \"100%\")\n            var selectedCountry;\n\n            const fitWorld = function () {\n                if (worldDefaultTransformation == undefined) {\n                    group.attr(\"transform\", function () {\n                        worldmapBBox = this.getBBox();\n                        worldScaleFactor = Math.min(height / worldmapBBox.height, width / worldmapBBox.width);\n                        worldmapBBoxOffsetX = 0.5 * width - worldScaleFactor * (worldmapBBox.x + 0.5 * worldmapBBox.width);\n                        worldmapBBoxOffsetY = 0.5 * height - worldScaleFactor * (worldmapBBox.y + 0.5 * worldmapBBox.height);\n                        worldDefaultTransformation = \"translate(\" + worldmapBBoxOffsetX + \",\" + worldmapBBoxOffsetY + \") scale(\" + worldScaleFactor + \")\";\n                        return worldDefaultTransformation;\n                    });\n                } else {\n                    group.transition().attr(\"transform\", worldDefaultTransformation);\n                }\n            };\n\n            const zoomContinentToWorld = function () {\n                focusLevel = \"world\";\n                group.selectAll(\".continent\").transition().duration(200).attr(\"transform\", \"\")\n                    .on(\"end\", function (d) {\n                        group.selectAll(\".continent\").attr(\"class\", function (d) {\n                            return 'continent';\n                        });\n                    });\n            };\n\n\n\n            const zoomContinentToCountry = function (clickedCountry) {\n                focusLevel = \"country\";\n                selectedCountry = clickedCountry;\n                c = clickedCountry.properties.name;\n                console.log(c);\n                group.selectAll(\".country\").filter(function (d) {\n                    if (d !== clickedCountry) {\n                        return d;\n                    }\n                }).attr(\"class\", \"country faded\");\n                previousTransformation = group.select(\".continent.focused\").attr(\"transform\");\n                group.selectAll(\".continent\").transition().duration(300).attr(\"transform\", \"\");\n                return group.selectAll(\".country\").filter(function (d) {\n                    if (d === clickedCountry) {\n                        return d;\n                    }\n                }).attr(\"class\", function (d) {\n                    return 'country focused';\n                }).transition().duration(600).attr(\"transform\", function () {\n                    var bBox, miniCountryOffsetX, miniCountryOffsetY, miniCountryScale, targetSize;\n                    bBox = this.getBBox();\n                    targetSize = Math.min(width / 1.3, height / 1.3);\n                    miniCountryScale = Math.min(targetSize / bBox.width, targetSize / bBox.height);\n                    miniCountryOffsetX = -bBox.x * miniCountryScale + 40;\n                    miniCountryOffsetY = -bBox.y * miniCountryScale + 40;\n                    return \"translate(\" + miniCountryOffsetX + \",\" + miniCountryOffsetY + \") scale(\" + miniCountryScale + \")\";\n                }).on(\"end\", function () {\n                    document.getElementById(\"country-details\").className = \"\";\n                    document.getElementById(\"description\").className = \"\";\n                    document.getElementById(\"legend1\").className = \"faded\"\n                    document.getElementById(\"map-country-header\").textContent = \"More Info on \" + clickedCountry.properties.name;\n                    document.getElementById(\"map-country-header\").href = 'http://localhost:3000/info/' + clickedCountry.properties.name;\n\n                    document.getElementById(\"table-header\").textContent = clickedCountry.properties.name;\n                    try {\n\n\n                        document.getElementById(\"table-deaths\").textContent = country_data[clickedCountry.properties.name]['deaths'];\n                        document.getElementById(\"table-recovered\").textContent = country_data[clickedCountry.properties.name]['recovered'];\n                        document.getElementById(\"table-cases\").textContent = country_data[clickedCountry.properties.name]['cases'];\n                    } catch (err) {\n\n                        document.getElementById(\"map-country-header\").textContent = \"No Info on \" + clickedCountry.properties.name;\n                        document.getElementById(\"map-country-header\").href = '/';\n\n                        document.getElementById(\"table-deaths\").textContent = \"no info\";\n                        document.getElementById(\"table-recovered\").textContent = \"no info\";\n                        document.getElementById(\"table-cases\").textContent = \"no info\";\n\n                    }\n                    document.getElementById(\"country-name\").textContent =\n                        clickedCountry.properties.name + ' ' + country_data[clickedCountry.properties.name]['cases'];\n\n                });\n            };\n\n            const zoomCountryToContinent = function () {\n                // document.getElementById(\"svg\").className = \"\";\n                document.getElementById(\"legend1\").className = \"\"\n                document.getElementById(\"country-details\").className = \"faded\";\n                document.getElementById(\"description\").className = \"faded\";\n                focusLevel = \"continent\";\n                group.selectAll(\".country\").attr(\"class\", function (d) {\n                    return 'country';\n                });\n                group.selectAll(\".country\").filter(function (d) {\n                    if (d === selectedCountry) {\n                        return d;\n                    }\n                }).transition().attr(\"transform\", \"\");\n                group.select(\".continent.focused\").transition().delay(50).duration(200).attr(\"transform\", previousTransformation);\n            };\n\n            const zoomWorldToContinent = function (clickedCountry) {\n                group.transition().attr(\"transform\", \"\");\n                translateX = null;\n                translateY = null;\n                focusLevel = \"continent\";\n                continent = clickedCountry.properties.continent;\n                group.selectAll(\".continent\").filter(function (d) {\n                    if (d.name !== continent) {\n                        return d;\n                    }\n                }).attr(\"class\", function () {\n                    return this.className.animVal + \" unfocused\";\n                });\n                group.selectAll(\".continent\").filter(function (d) {\n                    if (d.name === continent) {\n                        return d;\n                    }\n                }).attr(\"class\", \"continent focused\").transition().duration(400).attr(\"transform\", function () {\n                    var bBox, scaleFactor;\n                    bBox = this.getBBox();\n                    scaleFactor = Math.min(width / bBox.width, height / bBox.height);\n                    translateX = 0.5 * width - scaleFactor * (bBox.x + 0.5 * bBox.width);\n                    translateY = 0.5 * height - scaleFactor * (bBox.y + 0.5 * bBox.height);\n                    return \"translate(\" + translateX + \",\" + translateY + \") scale(\" + scaleFactor + \")\";\n                });\n                group.selectAll(\".country\").attr(\"class\", function (d) {\n                    return 'country';\n                });\n            };\n\n            var focusLevel = \"world\";\n\n            const changeFocus = function (clickedCountry) {\n                if (clickedCountry != null) {\n                    if (focusLevel == \"world\") {\n                        zoomWorldToContinent(clickedCountry);\n                    } else if (focusLevel == \"continent\") {\n                        zoomContinentToCountry(clickedCountry);\n                    }\n                } else if (clickedCountry == null) {\n                    if (focusLevel == \"country\") {\n                        zoomCountryToContinent();\n                    } else if (focusLevel == \"continent\") {\n                        fitWorld();\n                        zoomContinentToWorld();\n                    }\n                }\n            };\n\n            const baseValue = 120;\n            const remainder = 255 - baseValue;\n            // console.log(locations)\n\n            const colorScheme = d3.interpolatePuBu;\n            const colorScale = d3.scaleSqrt().domain([0, Math.log10(country_data['casesMax'])]);\n\n\n\n            const tooltip = function (country, c) {\n                // console.log(c)\n                // var location = locations[country]\n                // var t = projection(c)\n                // var coordinates = projection([location.longitude, location.latitude]);\n                // console.log(coordinates)\n                // svg.selectAll().data([1])\n                //     .enter()\n                //     .append(\"circle\")\n                //     .attr(\"class\", \"bigcircle\")\n                //     .attr(\"cx\", t[0] - 30)\n                //     .attr(\"cy\", t[1])\n                //     .attr(\"r\", 10)\n                //     .style(\"fill\", \"69b3a2\")\n                //     .attr(\"stroke\", \"#69b3a2\")\n                //     .attr(\"stroke-width\", 3)\n                //     .attr(\"fill-opacity\", .4)\n\n                // console.log(\"clicked\")\n            }\n\n\n\n\n\n            //!!!!!\n            // We draw the continents here\n            //!!!!!\n\n            const mouseAction = function (clickedCountry) {\n                if (focusLevel != 'country') {\n                    document.getElementById(\"map-country-header\").textContent = clickedCountry.properties.name\n                }\n            }\n            group.selectAll(\".continent\").data(continents).enter().call(function (d) {\n                return d.append(\"g\").attr('class', function (d) {\n                    return 'continent ' + d.name.replace(' ', '');\n                }).selectAll(\".country\").data(function (d) {\n                    return d.features;\n                }).enter().insert(\"path\").attr(\"class\", \"country\")\n                    .attr(\"fill\", function (d) {\n\n                        try {\n                            const country = country_data[d.properties.name];\n\n                            const value = Math.log10(country['cases']);\n                            return colorScheme(colorScale(value));\n\n                        }\n                        catch (err) {\n\n                            return \"rgb(211, 211, 211)\";\n\n                        }\n\n                    }).attr(\"d\", path).attr(\"id\", function (d) {\n                        return d.id;\n                    }).attr(\"stroke\", \"white\")\n                    .attr(\"stroke-width\", 0.6)\n                    .on(\"mouseover\", function (d) {\n                        mouseAction(d);\n                        return tooltip(d.properties.name, d3.geoCentroid(d))\n                    })\n                    .on(\"click\", function (d) {\n                        changeFocus(d);\n                        d3.event.stopPropagation();\n                    });\n            });\n\n            // We here draw some attributes of continents, here we simply display the name\n            var continent, continentBBox, i, len;\n            for (i = 0, len = continents.length; i < len; i++) {\n                continent = continents[i];\n                continentBBox = null;\n                group.selectAll(\".continent\").filter(function (d) {\n                    if (d.name === continent.name) {\n                        continentBBox = this.getBBox();\n                        return d;\n                    }\n                }).append(\"text\").attr(\"class\", \"continent-name\").text(function (d) {\n                    return d.name;\n                }).attr(\"transform\", function () {\n                    var textOffsetX, textOffsetY;\n                    textOffsetX = continentBBox.x + continentBBox.width / 2;\n                    textOffsetY = continentBBox.y + continentBBox.height / 2;\n                    return \"translate(\" + textOffsetX + \",\" + textOffsetY + \")\";\n                });\n            }\n\n            // We catch the click\n            d3.select(\"body\").on(\"click\", function () {\n                changeFocus();\n                d3.event.stopPropagation();\n            });\n\n            // We scale the map to fit the #map-container div\n            fitWorld();\n\n\n            var w = 20, h = 300;\n\n            var key = d3.select(\"#legend1\")\n                .append(\"svg\")\n                .attr(\"width\", w)\n                .attr(\"height\", h);\n\n            var legend = key.append(\"defs\")\n                .append(\"svg:linearGradient\")\n                .attr(\"id\", \"gradient\")\n                .attr(\"x1\", \"0%\")\n                .attr(\"y1\", \"100%\")\n                .attr(\"x2\", \"100%\")\n                .attr(\"y2\", \"100%\")\n                .attr(\"spreadMethod\", \"pad\");\n\n            legend.append(\"stop\")\n                .attr(\"offset\", \"0%\")\n                .attr(\"stop-color\", \"#f7fcf0\")\n                .attr(\"stop-opacity\", 1);\n\n            legend.append(\"stop\")\n                .attr(\"offset\", \"33%\")\n                .attr(\"stop-color\", \"#7fdae1\")\n                .attr(\"stop-opacity\", 1);\n\n            legend.append(\"stop\")\n                .attr(\"offset\", \"66%\")\n                .attr(\"stop-color\", \"#7bccc4\")\n                .attr(\"stop-opacity\", 1);\n\n            legend.append(\"stop\")\n                .attr(\"offset\", \"100%\")\n                .attr(\"stop-color\", \"#084081\")\n                .attr(\"stop-opacity\", 1);\n\n            key.append(\"rect\")\n                .attr(\"width\", h)\n                .attr(\"height\", w)\n                .style(\"fill\", \"url(#gradient)\")\n                .attr(\"transform\", \"translate(0,10)\")\n                .attr(\"transform\", \"rotate(90)\");\n\n            var y = d3.scaleLinear()\n                .range([300, 0])\n                .domain([country_data['casesMax'], 0]);\n\n            var yAxis = d3.axisBottom()\n                .scale(y)\n                .ticks(5);\n\n            key.append(\"g\")\n                .attr(\"class\", \"y axis\")\n                .attr(\"transform\", \"translate(0,10)\")\n                .attr(\"transform\", \"rotate(90)\")\n                .call(yAxis)\n                .append(\"text\")\n                .attr(\"y\", 0)\n                .attr(\"dy\", \".71em\")\n                .style(\"text-anchor\", \"end\")\n                .text(\"axis title\");\n        }\n\n\n\n\n    }, [props.data_all]);\n\n\n\n\n    return (\n\n        <Grid centered>\n            <Grid.Row id='tool' textAlign=\"center\">\n                <Button size='huge' basic color=\"blue\" href='/world' id=\"map-country-header\"> World </Button>\n            </Grid.Row>\n\n            <div id=\"map-container\" ref={wrapperRef} >\n                <Grid.Row >\n                    <svg id='svg' ref={svgRef}>\n\n                    </svg>\n\n                    <div id=\"legend1\" className=\"\"></div>\n\n                </Grid.Row>\n                <Grid.Row>\n                    <div id='country-details'>\n                        <div id='description' className='faded'>\n                            <Table className='country-table' textAlign=\"center\" color='black' celled striped>\n                                <Table.Header>\n                                    <Table.Row>\n                                        <Table.HeaderCell className='table-cell' id='table-header' colSpan='3'>Git Repository</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    <Table.Row>\n                                        <Table.Cell className='table-cell' collapsing>\n                                            <Icon name='arrow circle up' /> Total Cases</Table.Cell>\n                                        <Table.Cell className='table-cell' id='table-cases'></Table.Cell>\n\n                                    </Table.Row>\n                                    <Table.Row>\n                                        <Table.Cell className='table-cell'>\n                                            <Icon color='green' name='arrow circle down' /> Recovered </Table.Cell>\n                                        <Table.Cell className='table-cell' id='table-recovered'></Table.Cell>\n\n                                    </Table.Row>\n                                    <Table.Row>\n                                        <Table.Cell className='table-cell'>\n                                            <Icon color=\"red\" name='plus square' /> Deaths </Table.Cell>\n                                        <Table.Cell className='table-cell' id='table-deaths'></Table.Cell>\n                                    </Table.Row>\n                                </Table.Body>\n\n                            </Table>\n                        </div>\n                    </div>\n\n                </Grid.Row>\n\n            </div>\n        </Grid >);\n\n\n\n}\n\n\n\nexport default GeoChart","import React, { Component } from 'react';\n\nimport axios from 'axios';\nimport Navigation from \"./navigation\";\nimport PropTypes from \"prop-types\";\n\nimport { Grid, Message } from 'semantic-ui-react'\nimport GeoChart from './geochart';\nimport CountUp from 'react-countup';\nimport \"./css/homepage.css\";\n\n\nclass Homepage extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data_all: [],\n            overall: [],\n            recovered: 1,\n            cases: 1,\n            deaths: 1,\n\n        }\n\n    }\n\n\n    componentDidMount() {\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        axios\n            .get(\"http://127.0.0.1:8000/api/get/data/\",\n                config)\n            .then(res => {\n                const datum = res.data\n                this.setState({ data_all: datum })\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n\n        axios\n            .get(\"http://127.0.0.1:8000/api/get/all/\",\n                config)\n            .then(res => {\n                const datum = res.data\n                this.setState({\n                    overall: datum, cases: datum['cases'],\n                    deaths: datum['deaths'],\n                    recovered: datum['recovered']\n\n                })\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n\n\n\n    }\n\n    render() {\n\n        const elements = [];\n        const ov = this.state.overall;\n        const data = this.state.data_all;\n\n        const deaths = (<CountUp className='countup' delay={1} end={this.state.deaths} />);\n\n        const cases = (<CountUp className='countup' delay={1} end={this.state.cases} />);\n        const recoveries = (<CountUp className='countup' delay={1} end={this.state.recovered} />)\n\n        return (\n\n            <div className=\"all-wrapper\">\n\n                <Navigation />\n\n                <div className=\"homepage-row\">\n\n\n                    <Grid stackable centered>\n\n                        <Grid.Row className=\"top-row\" color=\"\">\n                            <h1> Covid-19 World Project </h1>\n                        </Grid.Row>\n                        <Grid.Row className=\"bottom-row\" color=\"\" columns={3}>\n                            <Grid.Column textAlign=\"center\">\n                                <Message\n                                    size=\"small\"\n                                    color=\"blue\"\n                                    className=\"stat-message\"\n                                    icon='chart line'\n                                    header='Cases'\n                                    content={cases}\n                                />\n                                {/* <CountUp className='countup' prefix=\"Cases: \" delay={1} end={this.state.cases} /> */}\n\n                            </Grid.Column >\n                            <Grid.Column textAlign=\"center\" >\n                                <Message\n                                    size=\"small\"\n                                    color=\"blue\"\n\n                                    className=\"stat-message\"\n                                    icon='heartbeat'\n                                    header='Recovered'\n                                    content={recoveries}\n\n                                ></Message>\n                                {/* <CountUp className='countup' prefix=\"Recovered: \" delay={1} end={this.state.recovered} /> */}\n                            </Grid.Column>\n                            <Grid.Column textAlign=\"center\" >\n                                <Message\n                                    size=\"small\"\n                                    color=\"blue\"\n                                    className=\"stat-message\"\n                                    icon='plus square'\n                                    header='Deaths'\n                                    content={deaths}\n\n                                />\n                                {/* <CountUp className='countup' prefix=\"Deaths: \" delay={1} end={this.state.deaths} /> */}\n\n                            </Grid.Column>\n\n                        </Grid.Row>\n                    </Grid>\n                </div>\n\n                <GeoChart data_all={this.state.data_all}></GeoChart>\n                <div className=\"more-info\">\n\n                    <Message color='blue' className='message' size='huge'>\n                        <Message.Header className=\"message-header\">Map Usage</Message.Header>\n                        <Message.List>\n                            <Message.Item>Click on a continent to zoom on continent</Message.Item>\n                            <Message.Item>Click on a country to view country stats</Message.Item>\n                            <Message.Item>Click on the more-info button once it appears to view dedicated country statistics page </Message.Item>\n                        </Message.List>\n                    </Message>\n\n                </div>\n\n\n            </div >\n\n        );\n    }\n}\n\nexport default Homepage;","import React, { Component } from 'react';\nimport { Dropdown, Table } from \"semantic-ui-react\"\nimport axios from 'axios';\nimport \"./css/countries.css\";\nimport Navigation from \"./navigation\";\nimport _ from 'lodash'\nimport { Link } from \"react-router-dom\";\n\n\n\n\nconst options = [\n    { text: 'Overall Statistics', value: 'Overall' },\n    { text: 'Today Statistics', value: 'Today' },\n    { text: 'Per Million Statistics', value: 'Per Million' },\n]\nclass Countries extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            column: null,\n            direction: null,\n            value: \"Overall\",\n            option: \"Overall Statistics\",\n        }\n    }\n    componentDidMount() {\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        axios\n            .get(\"http://127.0.0.1:8000/api/get/countries/\",\n                config)\n            .then(res => {\n                const datum = res.data\n                this.setState({ data: datum })\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n\n    }\n    handleSort = (clickedColumn) => () => {\n        const { column, data, direction } = this.state\n\n        if (column !== clickedColumn) {\n            this.setState({\n                column: clickedColumn,\n                data: _.sortBy(data, [clickedColumn]),\n                direction: 'descending',\n            })\n\n            return\n        }\n        this.setState({\n            data: data.reverse(),\n            direction: direction === 'ascending' ? 'descending' : 'ascending',\n        })\n    }\n\n    onChange(e, data) {\n        this.setState({ value: data.value, option: data.text });\n    }\n\n\n\n\n    render() {\n        const { column, data, direction, value } = this.state\n\n\n        const elements = [];\n        const million_stats = [];\n        const today_stats = []\n        const table_header = [];\n        const table_body = [];\n\n        const header1 = (\n            <Table.Header className=\"table-head\">\n                <Table.Row className=\"table-row\">\n                    <Table.HeaderCell sorted={column === 'country' ? direction : null}\n                        onClick={this.handleSort('country')} width={3} >Country</Table.HeaderCell>\n                    <Table.HeaderCell sorted={column === 'cases' ? direction : null}\n                        onClick={this.handleSort('cases')}\n                        width={3}> Cases</Table.HeaderCell>\n                    <Table.HeaderCell sorted={column === 'active' ? direction : null}\n                        onClick={this.handleSort('active')}\n                        width={3}> Active Cases</Table.HeaderCell>\n                    <Table.HeaderCell sorted={column === 'recovered' ? direction : null}\n                        onClick={this.handleSort('recovered')}\n                        width={3}> Recoveries</Table.HeaderCell>\n                    <Table.HeaderCell sorted={column === 'deaths' ? direction : null}\n                        onClick={this.handleSort('deaths')} width={3}> Deaths</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n        );\n\n        const header2 = (\n            <Table.Header className=\"table-head\">\n                <Table.Row className=\"table-row\">\n                    <Table.HeaderCell sorted={column === 'country' ? direction : null}\n                        onClick={this.handleSort('country')} width={3} >Country</Table.HeaderCell>\n                    <Table.HeaderCell sorted={column === 'cases' ? direction : null}\n                        onClick={this.handleSort('cases')}\n                        width={3}> Cases</Table.HeaderCell>\n\n                    <Table.HeaderCell sorted={column === 'deaths' ? direction : null}\n                        onClick={this.handleSort('deaths')}\n                        width={3}> Recoveries</Table.HeaderCell>\n                    <Table.HeaderCell sorted={column === 'Tests' ? direction : null}\n                        onClick={this.handleSort('Tests')} width={3}> Deaths</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header >\n\n        );\n        const header3 = (\n            <Table.Header className=\"table-head\">\n                <Table.Row className=\"table-row\">\n                    <Table.HeaderCell sorted={column === 'country' ? direction : null}\n                        onClick={this.handleSort('country')} width={3} >Country</Table.HeaderCell>\n                    <Table.HeaderCell sorted={column === 'cases' ? direction : null}\n                        onClick={this.handleSort('cases')}\n                        width={3}> Cases</Table.HeaderCell>\n\n                    <Table.HeaderCell sorted={column === 'deaths' ? direction : null}\n                        onClick={this.handleSort('deaths')}\n                        width={3}> Recoveries</Table.HeaderCell>\n\n                </Table.Row>\n            </Table.Header >\n\n        );\n        for (var i = 0; i < data.length; i++) {\n            const perMillion = (\n                <Table.Row className=\"table-row\">\n\n                    <Table.Cell textAlign=\"center\" id='row-1' width={3}><Link to={'/info/' + data[i]['country']}> {data[i]['country']}</Link> </Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-2' width={3}>{data[i]['casesPerOneMillion']}</Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-3' width={3}>{data[i]['deathsPerOneMillion']}</Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-4' width={3}> {data[i]['testsPerOneMillion']}</Table.Cell>\n                </Table.Row >\n\n            )\n            const today = (\n                <Table.Row className=\"table-row\">\n                    <Table.Cell textAlign=\"center\" id='row-1' width={3}> <Link to={'/info/' + data[i]['country']}> {data[i]['country']}</Link>  </Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-2' width={3}>{data[i]['todayCases']}</Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-3' width={3}>{data[i]['todayDeaths']}</Table.Cell>\n                </Table.Row >\n\n            )\n            const el = (\n                <Table.Row className=\"table-row\">\n                    <Table.Cell textAlign=\"center\" id='row-1' width={3}> <Link to={'/info/' + data[i]['country']}> {data[i]['country']}</Link>  </Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-2' width={3}>{data[i]['cases']}</Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-3' width={3}>{data[i]['active']}</Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-4' width={3}> {data[i]['recovered']}</Table.Cell>\n                    <Table.Cell textAlign=\"center\" id='row-5' width={3}>{data[i]['deaths']}</Table.Cell>\n                </Table.Row >\n            )\n            elements.push(el);\n            million_stats.push(perMillion);\n            today_stats.push(today);\n        }\n\n        if (value == \"Overall\") {\n            table_header.push(header1);\n            table_body.push(elements);\n        } else if (value == \"Per Million\") {\n            table_header.push(header2);\n            table_body.push(million_stats);\n        } else {\n            table_header.push(header3);\n            table_body.push(today_stats);\n        }\n\n\n\n\n        return (<div>\n            <Navigation>\n\n            </Navigation>\n\n            <div className=\"dropdown-wrapper\">\n                <Dropdown button\n                    className='icon'\n                    floating\n                    labeled text={this.state.value}\n                    options={options}\n                    onChange={this.onChange.bind(this)}>\n                </Dropdown>\n            </div>\n\n\n\n\n            <div className=\"table-wrapper\">\n\n\n                <Table striped singleLine  >\n                    {table_header}\n                    <Table.Body className=\"table-body\">\n\n\n                        {table_body}\n\n\n\n\n                    </Table.Body>\n\n                </Table>\n\n            </div>\n\n\n\n        </div>);\n    }\n}\n\nexport default Countries;","import React, { Component } from 'react';\nimport Navigation from \"./navigation\"\nimport axios from 'axios';\nimport { Pie, Polar } from 'react-chartjs-2';\nimport { Grid, Table, Dropdown, Message, Segment, Progress, Button } from \"semantic-ui-react\";\nimport CountUp from 'react-countup';\nimport \"./css/countryview.css\";\nimport { Link } from \"react-router-dom\";\n\n\n// Per Capita death rate, recovery rate, infection rate\n\n// Postman\n\nconst options = [\n    { text: 'Overall Statistics', value: 'Overall Statistics' },\n    { text: 'Per Million Statistics', value: 'Per Million Statistics' },\n]\nclass Country extends Component {\n    constructor() {\n        super();\n        this.state = {\n            countries: [],\n            data: [],\n            todayDeaths: '0',\n            todayCases: '0',\n            cases: '0',\n            recovered: 1,\n            active: 1,\n            cases: 1,\n            deaths: 1,\n            critical: \"0\",\n            casesPerOneMillion: 1,\n            deathsPerOneMillion: 1,\n            totalTests: 1,\n            testsPerOneMillion: 1,\n            value: \"Overall Statistics\"\n        };\n\n        this.componentDidMount = this.componentDidMount.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            match: { params }\n        } = this.props;\n\n        console.log(params.country)\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        axios\n            .get(`https://coronavirus-19-api.herokuapp.com/countries/${params.country}`,\n                config)\n            .then(res => {\n                const datum = res.data\n                this.setState({\n                    data: datum,\n                    todayDeaths: datum[\"todayDeaths\"],\n                    todayCases: datum['todayCases'],\n                    cases: datum['cases'],\n                    recovered: datum['recovered'],\n                    active: datum['active'],\n                    deaths: datum['deaths'],\n                    critical: datum['critical'],\n                    casesPerOneMillion: datum['casesPerOneMillion'],\n                    deathsPerOneMillion: datum['deathsPerOneMillion'],\n                    totalTests: datum['totalTests'],\n                    testsPerOneMillion: datum['testsPerOneMillion'],\n\n                })\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n\n        axios\n            .get(\"http://127.0.0.1:8000/api/get/countries/\",\n                config)\n            .then(res => {\n                const datum = res.data\n                this.setState({ countries: datum })\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n\n\n\n\n    }\n\n    onChange(e, data) {\n        this.setState({ value: data.value, option: data.text });\n    }\n\n\n\n    render() {\n        const data = {\n            labels: [\"Active\", \"Deaths\", \"Recoveries\"],\n            datasets: [{\n                data: [this.state.active, this.state.deaths, this.state.recovered],\n                backgroundColor: [\n                    '#1d3557',\n                    '#457b9d',\n                    '#a8dadc'\n                ],\n                hoverBackgroundColor: [\n                    '#001233',\n                    '#001233',\n                    '#001233'\n                ]\n            }]\n        };\n\n        const value = this.state.value;\n\n        const header = [];\n        const body = [];\n        const datum = this.state.countries\n        const recovery_rate = Math.round((this.state.recovered / (this.state.cases)) * 100)\n        const death_rate = Math.round((this.state.deaths / (this.state.cases)) * 100)\n        const table_side = [];\n\n        for (var i = 0; i < datum.length; i++) {\n            const table_row = (\n                <Table.Row className=\"table-row\">\n                    <Table.Cell textAlign=\"center\" id='row-2' width={3}>{datum[i]['cases']}</Table.Cell>\n\n                    <Table.Cell textAlign=\"center\" id='row-1' width={3}><a href={'/info/' + datum[i]['country']}><h3>{datum[i]['country']} </h3></a> </Table.Cell>\n\n                </Table.Row >\n\n            )\n            table_side.push(table_row)\n        }\n\n        console.log(table_side)\n\n        const header1 = (\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell width={2} />\n                    <Table.HeaderCell width={2}> Quantity (PerMillion)</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n        )\n\n        const header2 = (\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell width={2} />\n                    <Table.HeaderCell width={2}> Quantity </Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n        )\n\n\n        const table_body1 = (\n            <Table.Body >\n                <Table.Row >\n                    <Table.Cell>Cases</Table.Cell>\n                    <Table.Cell >{this.state.casesPerOneMillion}</Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.Cell>Deaths</Table.Cell>\n                    <Table.Cell>{this.state.deathsPerOneMillion}</Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.Cell>Tests</Table.Cell>\n                    <Table.Cell>{this.state.testsPerOneMillion}</Table.Cell>\n                </Table.Row>\n            </Table.Body>\n\n        )\n\n        const table_body2 = (\n            <Table.Body >\n                <Table.Row >\n                    <Table.Cell>Cases</Table.Cell>\n                    <Table.Cell >{this.state.cases}</Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.Cell>Deaths</Table.Cell>\n                    <Table.Cell>{this.state.deaths}</Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.Cell>Active</Table.Cell>\n                    <Table.Cell>{this.state.active}</Table.Cell>\n                </Table.Row>\n\n            </Table.Body>\n        )\n\n        if (value == \"Per Million Statistics\") {\n            header.push(header1);\n            body.push(table_body1);\n        } else {\n            header.push(header2);\n            body.push(table_body2);\n        }\n\n\n\n        const cases = (<CountUp className='countup' delay={1} end={this.state.cases} />);\n\n        const today_deaths = (<CountUp className='countup' delay={1} end={this.state.todayDeaths} />);\n        const today_cases = (<CountUp className='countup' delay={1} end={this.state.todayCases} />)\n        const critical_cases = (this.state.critical != null) ? (<CountUp className='countup' delay={1} end={this.state.critical} />) : <h4>N/A</h4>\n        const recovery_progress = (this.state.recovered != null) ? (<Progress size='large' color='green' percent={recovery_rate} progress />) : (<h4> N/A</h4>)\n        const death_progess = (this.state.deaths != null) ? (<Progress size='large' color='red' percent={death_rate} progress />) : (<h4> N/A</h4>)\n            (<h4> N/A</h4>)\n        const active_cases = (this.state.active != null) ? (<p><CountUp className='count' delay={1} end={this.state.active} /> </p>) : (<h3> N/A</h3>)\n        const active_percentage = (this.state.active != null) ? (<h4>{Math.round((this.state.active / (this.state.cases)) * 100)}%</h4>) : (<h3> N/A</h3>)\n        const tests = (this.state.totalTests != null) ? (<p className='total-tests'> <CountUp className='count' delay={1} end={this.state.totalTests} /></p>) : (<h4>N/A</h4>)\n\n\n        return (<div>\n\n            <Navigation>\n            </Navigation>\n\n\n            <div className=\"content-wrapper\">\n\n                <div className='left'>\n                    <Table singleLine>\n\n                        <Table.Body className=\"table-body\">\n                            {table_side}\n                        </Table.Body>\n\n                    </Table>\n                </div>\n\n                <div className=\"right-column\">\n\n\n\n                    <Segment>\n\n\n\n                        <Grid stackable centered>\n\n\n                            <Grid.Column></Grid.Column>\n                            <Grid.Row className='header-row'  >\n                                <h1> {this.state.data['country']} </h1>\n                            </Grid.Row>\n\n\n                            <Grid.Row className='row-stat' columns={4}>\n                                <Grid.Column width={4} textAlign=\"center\">\n                                    <Message\n                                        size=\"small\"\n                                        // color=\"blue\"\n\n                                        className=\"stat-message\"\n                                        icon='chart line'\n                                        header='Cases'\n                                        content={cases}\n\n                                    ></Message>\n                                </Grid.Column >\n                                <Grid.Column width={4} textAlign=\"center\" >\n                                    <Message\n                                        size=\"small\"\n                                        // color=\"blue\"\n                                        className=\"stat-message\"\n                                        icon='ambulance'\n                                        header='Critical Cases'\n                                        content={critical_cases}\n\n                                    ></Message>\n                                </Grid.Column>\n                                <Grid.Column width={4} textAlign=\"center\" >\n                                    <Message\n                                        size=\"small\"\n                                        // color=\"blue\"\n                                        className=\"stat-message\"\n                                        icon='arrow alternate circle up'\n                                        header='Today Cases'\n                                        content={today_cases}\n\n                                    ></Message>\n                                </Grid.Column>\n                                <Grid.Column width={4} textAlign=\"center\" >\n                                    <Message\n                                        size=\"small\"\n                                        // color=\"blue\"\n                                        className=\"stat-message\"\n                                        icon='plus square'\n                                        header='Today Deaths'\n                                        content={today_deaths}\n\n                                    ></Message>\n                                </Grid.Column>\n\n\n\n                            </Grid.Row>\n\n\n                            <Grid.Row>\n\n                                <Grid.Column width={5}>\n\n                                    <Segment id='segment'  >\n                                        <h3> Current Recovery %:</h3>\n                                        <p> {recovery_progress}</p>\n\n                                    </Segment>\n                                    <Segment id='segment'  >\n                                        <h3> Current Death %:</h3>\n                                        <p> {death_progess}</p>\n\n                                    </Segment>\n\n\n                                </Grid.Column >\n                                <Grid.Column width={3}>\n\n\n                                    <Segment id='segment-2'  >\n\n                                        <h4>Active %: </h4>\n                                        {active_percentage}\n                                    </Segment>\n                                    <Segment id='segment-2'  >\n                                        <h4>Active Cases </h4>\n                                        {active_cases}\n\n                                    </Segment>\n                                    {/* <Segment id='segment-2'  >\n                                        <h4> Active Cases:</h4>\n                                        {active_cases}\n                                    </Segment> */}\n\n                                    <Segment id='segment-2'  >\n                                        <h4>Total Tests:</h4>\n                                        {tests}\n                                    </Segment>\n                                    {/* </Segment.Group> */}\n                                </Grid.Column >\n\n                                <Grid.Column className=\"stat-column-1\" width={8}>\n\n                                    <Segment id='segment-table'>\n                                        <div className=\"dropdown-wrapper\">\n                                            <Dropdown button\n                                                className='icon'\n                                                floating\n                                                labeled text={this.state.value}\n                                                options={options}\n                                                onChange={this.onChange.bind(this)}>\n                                            </Dropdown>\n                                        </div>\n                                        <Table striped size='medium' className='table-stat' textAlign='center' >\n                                            {header}\n\n                                            {body}\n                                        </Table>\n                                    </Segment>\n                                </Grid.Column>\n                            </Grid.Row>\n\n                            <Grid.Row>\n\n\n                                <Grid.Column width={8}>\n                                    <Segment id='segment-chart'>\n                                        <Pie data={data}></Pie>\n                                    </Segment>\n                                </Grid.Column>\n\n                                <Grid.Column width={8}>\n                                    <Segment id='segment-link'>\n                                        <Button color='blue' href='https://www.who.int/emergencies/diseases/novel-coronavirus-2019/advice-for-public'> Corona Virus Prevention </Button>\n                                    </Segment>\n                                    <Segment id='segment-link'>\n                                        <Button color='blue' href='https://coronavirus.jhu.edu/covid-19-basics/understanding-covid-19'> John Hopkins Uni Resource </Button>\n                                    </Segment>\n                                    <Segment id='segment-link'>\n                                        <Button color='blue' href='https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports'> World Health Organization </Button>\n                                    </Segment>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n\n                </div>\n            </div>\n\n        </div >);\n    }\n}\n\nexport default Country;","import React, { Component } from 'react';\nimport \"./css/about.css\";\nimport { Grid, Message } from 'semantic-ui-react'\n\nimport Navigation from \"./navigation\";\n\nclass About extends Component {\n    state = {}\n    render() {\n        return (\n            <div>\n\n\n                <Navigation>\n                </Navigation>\n                <div className=\"wrapper\">\n\n                    <div className=\"message\">\n\n                        <Message\n                            size=\"huge\"\n                            className=\"about-message\"\n                            icon='map marker'\n                            header='About this project'\n                            content='This project is meant to elegantly present information and statistics\n                        regarding Covid19 on a world-wide scale. This is not the final version of the project,\n                        hopefully there will be more edits to update the project to add more details.'\n                        />\n                    </div>\n\n                    <div className=\"message\">\n                        <Message\n                            size=\"huge\"\n\n                            className=\"about-message\"\n                            icon='chart bar'\n                            header='About the data'\n                            content='The data provided is from taken from the John Hopkins University Resource Center.\n                        Note that this data changes rapidly, therefore the numbers represented are not in real\n                        time but are constrained by the accuracy of the source.'\n                        />\n                    </div>\n                    <div className=\"message\">\n\n\n                        <Message size='huge' className=\"about-message\">\n                            <Message.Header className=\"message-header\">Future Plans</Message.Header>\n                            <Message.List>\n                                <Message.Item>Add a city/province/state statistics for countries</Message.Item>\n                                <Message.Item>Add news updates for countries</Message.Item>\n                                <Message.Item>Add trend line for each country</Message.Item>\n                            </Message.List>\n                        </Message>\n                    </div>\n\n\n\n\n                </div>\n\n            </div>);\n    }\n}\n\nexport default About;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  //  Replace Hash with BrowserRouter if server fails\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css'\nimport Homepage from \"./components/homepage\";\nimport Countries from \"./components/countries\";\nimport Country from \"./components/countryview\";\nimport About from \"./components/about\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Homepage} />\n          <Route exact path=\"/countries\" component={Countries} />\n          <Route exact path=\"/about\" component={About} />\n\n          <Route exact path=\"/info/:country\" component={withRouter(Country)} />\n        </Switch>\n      </Router >\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";"],"sourceRoot":""}